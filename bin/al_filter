#!/usr/bin/env python
import sys
import os
import logging
logging.basicConfig(level=logging.INFO)
from decimal import Decimal, getcontext
getcontext().prec = 80

# Hack in order to avoid making this a python package
sys.path.append(os.path.dirname(
    os.path.abspath(sys.argv[0])) + os.sep + os.pardir + os.sep + "algolab")

import argparse
from datetime import datetime
from pymongo import Connection, GEO2D

from algolab.anglered import anglereduce
from algolab.rdp import rdp
from algolab.segment import segment
from algolab.db import create_rg, loc_for_mult
from algolab.util import epsilon_linear


def log(zoom, msg, points=None):
    logging.info("[zoom=%i] %s %s" % (zoom, msg,
        ("[%s nodes remaining]" % points) if points is not None else ""))


def progress(msg, start, stop):
    sys.stdout.write("\r" + msg % (start, stop))
    if start == stop - 1:
        sys.stdout.write("\n")
    sys.stdout.flush()


def drop_col(col):
    col.drop()
    col.create_index([("loc", GEO2D)])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Algorithm Visualization")
    parser.add_argument("zl", type=int, nargs="+",
            help="zoom levels to generate a RG for")
    parser.add_argument("--host", action="store", dest="host", default="127.0.0.1",
            type=str, help="host of the mongo database")
    parser.add_argument("--port", action="store", dest="port", default=27017,
            type=int, help="port of the mongo database")
    parser.add_argument("--db", action="store", dest="db", default="osm-data",
            type=str, help="name of the database")
    parser.add_argument("--no-progress", action="store_true", dest="np", default=False,
            help="don't print the progress")
    args = parser.parse_args()

    db = Connection(args.host, args.port)[args.db]

    rg_ = db["railway_graph"]
    rgs = {i: db["railway_graph_%i" % i] for i in xrange(8, 17)}
    now = datetime.now()

    zls = list(args.zl)

    if 16 in zls:
        # Zoom level 16: Remove all unnecessary points (points on a straight
        # line)
        log(-1, "Loaded original railway graph", rg_.count())

        drop_col(rgs[16])
        log(16, "Deleted collection railway_graph_16")

        segments = segment(rg_)
        for i, seg in enumerate(segments):
            if not args.np:
                progress("Applying RDP to segment %s of %s", i, len(segments))
            sloc = loc_for_mult(seg, rg_)
            # Please note that anglereduce(x, 180) and rdp(x, 0) should yield
            # the same result, but anglereduce is faster.
            create_rg(anglereduce(sloc, 180), rgs[16])
        zls.remove(16)
        log(16, "Removed unnecessary points that are on a straight line", rgs[16].count())

    r16_segmented = None

    for zl in reversed(sorted(zls)):
        if zl > 10:
            if not r16_segmented:
                if rgs[16].count() == 0:
                    raise ValueError("railway_graph_16 contains no nodes")
                r16_segmented = segment(rgs[16])

            drop_col(rgs[zl])
            log(zl, "Deleted collection railway_graph_%i" % zl)

            epsilon = Decimal((0, (1, ), - 2 * zl + 20))
            for i, seg in enumerate(r16_segmented):
                if not args.np:
                    progress("Applying RDP to segment %s of %s", i, len(r16_segmented))
                sloc = loc_for_mult(seg, rgs[16])
                create_rg(rdp(sloc, epsilon), rgs[zl])
            log(zl, "Applied RDP with epsilon=%s" % epsilon.to_eng_string(), rgs[zl].count())

    logging.info("Total time spent: %s" % (datetime.now() - now))
